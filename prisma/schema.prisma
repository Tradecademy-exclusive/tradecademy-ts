generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String             @id @default(cuid())
  username         String             @unique
  email            String             @unique
  password         String
  picture          String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  planId           String
  focusPointId     String
  IP               String?
  groupId          String?
  Analysis         Analysis[]
  Enroll           Enroll[]
  Note             Note[]
  previousPlans    PreviousPlan[]
  focusPoint       FocusPoint         @relation(fields: [focusPointId], references: [id])
  Group            Group?             @relation(fields: [groupId], references: [id])
  plan             Plan               @relation(fields: [planId], references: [id])
  followupAnalysis followupAnalysis[]
  courses          Course[]           @relation("UserAccessedCourses")
  completed        Lesson[]           @relation("UserCompletedLessons")
}

model signupToken {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id              String     @id @default(uuid())
  title           String
  description     String
  cover           String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  price           Int
  discountedPrice Int
  materials       String?
  duration        String
  userId          String?
  maxStudents     Int        @default(0)
  learn           String     @default("")
  publishedCourse publicType @default(Published)
  chapters        Chapter[]
  Enroll          Enroll[]
  user            User[]     @relation("UserAccessedCourses")
}

model Chapter {
  id        String   @id @default(uuid())
  title     String
  courseId  String?
  quiz      String?
  chapter   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  summary   String?
  course    Course?  @relation(fields: [courseId], references: [id])
  lessons   Lesson[]
}

model Lesson {
  id          String     @id @default(uuid())
  title       String
  order       Int
  chapterId   String?
  noteId      String?
  thumbnail   String?
  content     String?
  attachments String[]   @default([])
  source      String?
  type        videoType?
  chapter     Chapter?   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  Note        Note?      @relation(fields: [noteId], references: [id])
  completed   User[]     @relation("UserCompletedLessons")
}

model Plan {
  id        String   @id @default(uuid())
  steps     String[]
  createdAt DateTime @default(now())
  User      User[]
}

model PreviousPlan {
  id        String   @id @default(uuid())
  steps     String[]
  userId    String?
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
}

model FocusPoint {
  id          String @id @default(uuid())
  description String
  User        User[]
}

model Note {
  id        String   @id @default(uuid())
  userId    String
  sessionId String
  lesson    Lesson[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Enroll {
  id        String       @id @default(uuid())
  status    enrollStatus @default(Pending)
  courseId  String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  email     String
  course    Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [email], references: [id], onDelete: Cascade)
}

model Group {
  id        String   @id @default(uuid())
  name      String
  color     String   @default("black")
  dateFrom  DateTime
  dateUntil DateTime
  createdAt DateTime @default(now())
  students  User[]
}

model Journal {
  id            String   @id @default(uuid())
  score         Int
  winnings      Int
  biggestLesson String
  tommorowPlan  String
  date          DateTime
}

model Analysis {
  id               String             @id @default(uuid())
  title            String
  image            String?
  video            String?
  content          String
  strategy         investmentType     @default(Neutral)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  mentorId         String?
  mentor           User?              @relation(fields: [mentorId], references: [id])
  followupAnalysis followupAnalysis[]
}

model followupAnalysis {
  id         String         @id @default(uuid())
  title      String
  image      String?
  video      String?
  strategy   investmentType @default(Neutral)
  content    String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  analysisId String
  mentorId   String?
  analysis   Analysis       @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  mentor     User?          @relation(fields: [mentorId], references: [id])
}

enum investmentType {
  Long
  Neutral
  Short
}

enum enrollStatus {
  Approved
  Cancelled
  Pending
}

enum videoType {
  HTML5
  External
  Youtube
  Vimeo
}

enum publicType {
  Draft
  Private
  Published
}
